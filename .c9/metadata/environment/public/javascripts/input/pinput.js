{"filter":false,"title":"pinput.js","tooltip":"/public/javascripts/input/pinput.js","ace":{"folds":[],"scrolltop":4498,"scrollleft":0,"selection":{"start":{"row":297,"column":5},"end":{"row":297,"column":5},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":11,"state":"start","mode":"ace/mode/javascript"}},"hash":"b53342d35a96ac913addd262be79ec38fd13684c","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":297,"column":5},"action":"insert","lines":["var Pinput = (function() {","\t\"use strict;\"","\t","\tvar realState = {","\t\tkeyStates: new Array(256),","\t\tmouseStates: new Array(3),","\t\tmousePosition: {x: 0, y: 0}","\t}","\t","\t// initializes all the keyboard states","\tvar Pinput = function() {","\t\t// creates arrays to store information about the state of ","\t\t// each of the keys. true if pressed, false otherwise. the","\t\t// *previousKeyStates* array is used to store the state of ","\t\t// the keys during the previous update cycle.","\t\tthis.keyStates = new Array(256);","\t\tthis.previousKeyStates = new Array(256);","","\t\t// analogous to *keyStates* and *previousKeyStates* ","\t\tthis.mouseStates = new Array(3);","\t\tthis.previousMouseStates = new Array(3);","","\t\tthis.useRealState = false;","","\t\tthis.mousePosition = {","\t\t\tx: 0,","\t\t\ty: 0,","\t\t}","","\t\tthis.lastMousePosition = {","\t\t\tx: 0,","\t\t\ty: 0,","\t\t}","","\t\t// initializes all the keyStates to their resting ","\t\t// position - not pressed","\t\tfor (var i = 0; i < this.keyStates.length; i++) {","\t\t\tthis.keyStates[i] = false;","\t\t\tthis.previousKeyStates[i] = false;","\t\t}","","\t\t// same as *keyStates* initialization","\t\tfor (var i = 0; i < this.mouseStates.length; i++) {","\t\t\tthis.mouseStates[i] = false;","\t\t\tthis.previousMouseStates[i] = false;","\t\t}","\t};","","\t// checks if the browser is firefox. used for determining some ","\t// edge cases, as some key codes differ from browser to browser.","\tvar isFireFox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;","","\t// removes all whitespace from a given string.","\tvar removeWhiteSpace = function(string) {","\t\tvar input = input + \"\";","\t\treturn string.replace(/\\s+/, '');","\t};","","\t// replaces all consecutive instances of whitespace in a given","\t// string with one space.","\tvar stripWhiteSpace = function(string) {","\t\tvar input = input + \"\";","\t\treturn string.replace(/\\s+/, ' ');","\t};","","\t// converts a string to a keycode","\tvar convertStringToKeycode = function(key) {","\t\tvar key = removeWhiteSpace(key);","\t\tkey = key.toUpperCase();","","\t\tswitch(key) {","\t\t\tcase \"BACKSPACE\":","\t\t\t\treturn ['key', 8];","\t\t\tcase \"SPACEBAR\":","\t\t\t\treturn ['key', 32];","\t\t\tcase \"TAB\":","\t\t\t\treturn ['key', 9];","\t\t\tcase \"ENTER\":","\t\t\t\treturn ['key', 13];","\t\t\tcase \"SHIFT\":","\t\t\t\treturn ['key', 16];","\t\t\tcase \"CONTROL\":","\t\t\t\treturn ['key', 17];","\t\t\tcase \"ALT\":","\t\t\t\treturn ['key', 18];","\t\t\tcase \"CAPSLOCK\":","\t\t\t\treturn ['key', 20];","\t\t\tcase \"ESCAPE\":","\t\t\t\treturn ['key', 27];","\t\t\tcase \"PAGEUP\":","\t\t\t\treturn ['key', 33];","\t\t\tcase \"PAGEDOWN\":","\t\t\t\treturn ['key', 34];","\t\t\tcase \"ARROWLEFT\":","\t\t\t\treturn ['key', 37];","\t\t\tcase \"ARROWUP\":","\t\t\t\treturn ['key', 38];","\t\t\tcase \"ARROWRIGHT\":","\t\t\t\treturn ['key', 38];","\t\t\tcase \"ARROWDOWN\":","\t\t\t\treturn ['key', 40];","\t\t\tcase \"INSERT\": ","\t\t\t\treturn ['key', 45];","\t\t\tcase \"DELETE\":","\t\t\t\treturn ['key', 46];","\t\t\tcase \"+\":","\t\t\t\treturn ['key', isFireFox ? 61 : 187];","\t\t\tcase \"=\":","\t\t\t\treturn ['key', isFireFox ? 61 : 187];","\t\t\tcase \"-\":","\t\t\t\treturn ['key', isFireFox ? 173 : 189];","\t\t\tcase \"[\":","\t\t\t\treturn ['key', 219];","\t\t\tcase \"]\":","\t\t\t\treturn ['key', 221];","\t\t\tcase \"/\":","\t\t\t\treturn ['key', 191];","\t\t\tcase \"\\\\\":","\t\t\t\treturn ['key', 220];","\t\t\tdefault:","\t\t\t\treturn ['key', key.charCodeAt(0)];","","\t\t}","\t};","","\t// converts a string of space separated keys to an array","\t// of keycodes which can be used to check their states","\tvar convertStringToKeyCombo = function(keyCombo) {","\t\tvar keyComboString = stripWhiteSpace(keyCombo);","\t\tvar combo = keyComboString.split(' ');","","\t\tfor (var i = 0; i < combo.length; i++) {","\t\t\tcombo[i] = convertStringToKeycode(combo[i]);","\t\t};","\t\treturn combo;","\t};","","\t// same as *convertStringToKeyCombo* but with mouse buttons","\tvar convertStringToButtonCode = function(buttonCode) {","\t\tvar code = removeWhiteSpace(buttonCode);","\t\tcode = code.toUpperCase();","\t\t","\t\tswitch(buttonCode) {","\t\t\tcase \"MOUSELEFT\":","\t\t\t\treturn ['mouse', 0];","\t\t\tcase \"MOUSEMIDDLE\":","\t\t\t\treturn ['mouse', 1];","\t\t\tcase \"MOUSERIGHT\":","\t\t\t\treturn ['mouse', 2];","\t\t\tdefault:","\t\t\t\treturn null;","\t\t}","\t};","","\tvar convertStringToCombo = function(combo) {","\t\tvar combo = stripWhiteSpace(combo);","\t\tvar tokens = combo.split(' ');","\t\tvar keysAndButtons = [];","","\t\tfor (var i = 0; i < tokens.length; i++) {","\t\t\tvar code = convertStringToButtonCode(tokens[i]);","\t\t\t","\t\t\tif (code != null) {","\t\t\t\tkeysAndButtons.push(code)","\t\t\t}","\t\t\telse {","\t\t\t\tkeysAndButtons.push(convertStringToKeycode(tokens[i]));","\t\t\t}","\t\t}","","\t\treturn keysAndButtons;","\t}","","\tvar checkCombo = function(combination, mouseStates, keyStates) {","\t\tvar combo = convertStringToCombo(combination);","","\t\tfor (var i = 0; i < combo.length; i++) {","\t\t\tif (combo[i][0] === 'mouse') {","\t\t\t\tif (!mouseStates[combo[i][1]]) {","\t\t\t\t\treturn false;","\t\t\t\t}","\t\t\t}","\t\t\telse {","\t\t\t\tif (!keyStates[combo[i][1]]) {","\t\t\t\t\treturn false;","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn true;","\t}","","\t// initializes the *realState* with the default values","\tvar init = function() {","\t\tfor (var i = 0; i < realState.keyStates.length; i++) {","\t\t\trealState.keyStates[i] = false;","\t\t}","","\t\tfor (var i = 0; i < realState.mouseStates.length; i++) {","\t\t\trealState.mouseStates[i] = false;","\t\t}","\t};","","\t// checks whether the given key is down in the given array.","\tvar isKeyDown = function(key, keyStateArray)","\t{","\t\tvar keyCode = convertStringToKeycode(key);","\t\treturn keyStateArray[keyCode];","\t};","","\t// same as *isKeyDown* but with mouse button","\tvar isButtonDown = function(button, buttonStateArray)","\t{","\t\tvar buttonCode = convertStringToButtonCode(button);","\t\treturn buttonStateArray[buttonCode];","\t};","","\t// checks if the key was clicked given an array of keystates and","\t// an array of previous key states","\tvar isKeyClicked = function(key, currentKeyStateArray, previousKeyStateArray)","\t{","\t\treturn isKeyDown(key, currentKeyStateArray) && !isKeyDown(key, previousKeyStateArray);","\t};","","\t// same as *isKeyClicked* but with mouse buttons","\tvar isButtonClicked = function(key, currentButtonStateArray, previousButtonStateArray)","\t{","\t\treturn isButtonDown(key, currentButtonStateArray) && !isButtonDown(key, previousButtonStateArray);","\t};","","\tPinput.prototype.isReleased = function(combo) {","\t\treturn !checkCombo(combo, this.mouseStates, this.keyStates) &&","\t\t\tcheckCombo(combo, this.previousMouseStates, this.previousKeyStates);","\t};","","\tPinput.prototype.isPressed = function(combo) {","\t\treturn checkCombo(combo, this.mouseStates, this.keyStates) &&","\t\t\t!checkCombo(combo, this.previousMouseStates, this.previousKeyStates);","\t};","","\tPinput.prototype.isDown = function(combo) {","\t\tif (this.useRealState) {","\t\t\tthis.mousePosition.x = realState.mousePosition.x;","\t\t\tthis.mousePosition.y = realState.mousePosition.y;","\t\t\treturn checkCombo(combo, realState.mouseStates, realState.keyStates);","\t\t}","\t\treturn checkCombo(combo, this.mouseStates, this.keyStates);","\t};","","\t// updates the key and mouse states of the current *pinput* instance.","\t// the previous key and mouse states are set to the current ones, and","\t// the current ones are set to reflect the actual state of the keyboard","\t// and mouse.","\tPinput.prototype.update = function() {","\t\tthis.previousKeyStates = this.keyStates.slice(0);","\t\tthis.keyStates = realState.keyStates.slice(0);","","\t\tthis.previousMouseStates = this.mouseStates.slice(0);","\t\tthis.mouseStates = realState.mouseStates.slice(0);","","\t\tthis.lastMousePosition.x = this.mousePosition.x;","\t\tthis.lastMousePosition.y = this.mousePosition.y;","\t\t","\t\tthis.mousePosition.x = realState.mousePosition.x;","\t\tthis.mousePosition.y = realState.mousePosition.y;","\t};\t","","\t// creates event handlers which update they real state with ","\t// values corresponding to the state of the mouse and the keyboard","\t// at the exact moment in time.","","\twindow.onkeydown = function(e) {","\t\tif (e.which == 18)","\t\t\te.preventDefault();","\t\trealState.keyStates[e.which] = true;","\t};","","\twindow.onkeyup = function(e) {","\t\trealState.keyStates[e.which] = false;","\t};","","\twindow.onmousedown = function(e) {","\t\trealState.mouseStates[e.button] = true;","\t};","","\twindow.onmouseup = function(e) {","\t\trealState.mouseStates[e.button] = false;","\t};","","\twindow.onmousemove = function(e) {","\t\trealState.mousePosition.x = e.clientX;","\t\trealState.mousePosition.y = e.clientY;","\t}","","\t// initializes *realState*","\tinit();","","\treturn Pinput;","})();"],"id":1}]]},"timestamp":1521919364155}